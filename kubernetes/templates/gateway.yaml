{{- if not .Values.managed_cluster }}
---
# gateway DB on hostPath
apiVersion: v1
kind: PersistentVolume
metadata:
  name: gateway-db-vol0
  namespace: {{ .Values.namespace }}
  labels:
    storage: gateway-db-storage0
spec:
  capacity:
    storage: {{ .Values.gateway_db.storage.storage0.data_size }}
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: {{ .Values.storageClasses.local }}
  hostPath:
    path: {{ .Values.gateway_db.storage.storage0.data_path }}
    type: DirectoryOrCreate
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: master
              operator: In
              values:
                - "true"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gateway-db-claim0
  namespace: {{ .Values.namespace }}
  labels:
    storage: gateway-db-storage0
spec:
  selector:
    matchLabels:
      storage: gateway-db-storage0
  storageClassName: {{ .Values.storageClasses.local }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.gateway_db.storage.storage0.data_size }}
{{- else }}
---
# managed cluster: only PVC on CephFS
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gateway-db-claim0
  namespace: {{ .Values.namespace }}
  annotations:
    # tells Argo CD: do not prune (delete) this resource
    argocd.argoproj.io/sync-options: Delete=false,Prune=false
spec:
  storageClassName: {{ .Values.storageClasses.managed }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.gateway_db.storage.storage0.data_size }}
{{- end }}

---
# Deployment and Service remain unchanged
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
  namespace: {{ .Values.namespace }}
  labels:
    app: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: gateway
    spec:
      {{ if not .Values.managed_cluster }}
      nodeSelector:
        master: "true"
      {{ end }}
      hostname: gateway
      volumes:
      - name: gateway-db-claim0
        persistentVolumeClaim:
          claimName: gateway-db-claim0
      containers:
      - name: gateway-db
        image: {{ .Values.gateway_db.image.name }}:{{ .Values.gateway_db.image.version }}
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: gateway-db-claim0
          mountPath: /var/lib/postgres
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: mip-secret
              key: gateway-db.DB_ADMIN_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mip-secret
              key: gateway-db.DB_ADMIN_PASSWORD

      - name: gateway
        image: {{ .Values.gateway.image.name }}:{{ .Values.gateway.image.version }}
        imagePullPolicy: Always
        ports:
        - containerPort: 8081
        env:
        - name: ENGINE_TYPE
          valueFrom:
            configMapKeyRef:
              name: mip-config
              key: gateway.ENGINE_TYPE
        - name: ENGINE_BASE_URL
          value: http://portalbackend-service:8080/services/
        - name: TOS_SKIP
          value: "false"
        - name: GATEWAY_PORT
          value: "8081"
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: mip-config
              key: gateway.NODE_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: mip-config
              key: gateway.LOG_LEVEL
        - name: BASE_URL_CONTEXT
          value: services
        - name: AUTH_SKIP
          value: "true"
        - name: AUTH_ENABLE_SSO
          {{- if eq .Values.keycloak.AUTHENTICATION 1.0 }}
          value: "true"
          {{- else }}
          value: "false"
          {{- end }}
        - name: DB_HOST
          value: localhost
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: postgres
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: mip-secret
              key: gateway-db.DB_ADMIN_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mip-secret
              key: gateway-db.DB_ADMIN_PASSWORD
        - name: CACHE_ENABLED
          valueFrom:
            configMapKeyRef:
              name: mip-config
              key: gateway.CACHE_ENABLED
        - name: CACHE_TTL
          valueFrom:
            configMapKeyRef:
              name: mip-config
              key: gateway.CACHE_TTL
        - name: CACHE_MAX_ITEMS
          valueFrom:
            configMapKeyRef:
              name: mip-config
              key: gateway.CACHE_MAX_ITEMS
---
apiVersion: v1
kind: Service
metadata:
  name: gateway-service
  namespace: {{ .Values.namespace }}
  labels:
    app: gateway
spec:
  selector:
    app: gateway
  ports:
  - name: "8081"
    port: 8081
    targetPort: 8081
