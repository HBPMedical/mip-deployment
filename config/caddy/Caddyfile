(rp-proxied) {
	reverse_proxy {args.0} {
		header_down +X-Mip-Link "proxied"
		header_down +X-External-Mip-Protocol {$EXTERNAL_MIP_PROTOCOL}
		header_down +X-Public-Mip-Protocol {$PUBLIC_MIP_PROTOCOL}
		header_down +X-Public-Mip-Host {$PUBLIC_MIP_HOST}
		header_up X-Forwarded-Host {header.X-Forwarded-Host}
		header_up Host {header.X-Forwarded-Host}
		header_up X-Real-IP {header.X-Forwarded-For}
		header_up X-Forwarded-For {header.X-Forwarded-For}
		header_up X-Forwarded-Proto {$EXTERNAL_MIP_PROTOCOL:https}
	}
}

(rp-direct) {
	reverse_proxy {args.0} {
		header_down +X-Mip-Link "direct"
		header_down +X-External-Mip-Protocol {$EXTERNAL_MIP_PROTOCOL}
		header_down +X-Public-Mip-Protocol {$PUBLIC_MIP_PROTOCOL}
		header_down +X-Public-Mip-Host {$PUBLIC_MIP_HOST}
		header_up Host {hostport}
		header_up X-Real-IP {remote_host}
		header_up X-Forwarded-For {remote_host}
		header_up X-Forwarded-Proto {$EXTERNAL_MIP_PROTOCOL:https}
	}
}

{$PUBLIC_MIP_PROTOCOL:https}://{$PUBLIC_MIP_HOST} {
	encode gzip zstd

	log {
		level {$ERROR_LOG_LEVEL:warn}
	}

	handle /* {
		root * /usr/share/caddy/html
		try_files {path} /index.html
		file_server
	}

	redir {$KEYCLOAK_AUTH_PATH:/dummyauth} {$KEYCLOAK_AUTH_PATH:/dummyauth}/
	handle {$KEYCLOAK_AUTH_PATH:/dummyauth}/* {
		redir /dummyauth/* /
		import rp-{$MIP_LINK:direct} {$KEYCLOAK_HOST}
	}


	### Portal-Backend Keycloak Authentication ---------------> ###

	handle /services/sso/* {
		uri replace /services/ /{$PORTAL_BACKEND_CONTEXT:services}/
		import rp-{$MIP_LINK:direct} {$PORTAL_BACKEND_SERVER}
	}

	handle /services/oauth2/* {
		uri replace /services/ /{$PORTAL_BACKEND_CONTEXT:services}/
		import rp-{$MIP_LINK:direct} {$PORTAL_BACKEND_SERVER}
	}

	handle /services/login/oauth2/* {
		uri replace /services/ /{$PORTAL_BACKEND_CONTEXT:services}/
		import rp-{$MIP_LINK:direct} {$PORTAL_BACKEND_SERVER}
	}

	handle /services/logout {
		uri replace /services/ /{$PORTAL_BACKEND_CONTEXT:services}/
		import rp-{$MIP_LINK:direct} {$PORTAL_BACKEND_SERVER}
	}

	# Keycloak redirects on /services/ after login and logout. In that case, redirect to /
	redir /services/ / permanent

	### <--------------- Portal-Backend Keycloak Authentication ###


	handle_path /services/* {
		import rp-{$MIP_LINK:direct} {$GATEWAY_SERVER}
	}

	handle_errors {
		@4xx expression `{http.error.status_code} == 404`
		redir * / temporary
	}
}