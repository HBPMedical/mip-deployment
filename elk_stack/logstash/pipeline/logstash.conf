input
{
  tcp {
    port => 5010
    type => syslog
    codec => multiline {
      pattern => "<%{NUMBER}>%{MONTH}%{SPACE}%{MONTHDAY}%{SPACE}%{TIME}%{SPACE}%{DATA}: %{TIMESTAMP_ISO8601} %{GREEDYDATA}"
      negate => true
      what => "previous"
    }
  }
}

filter {
  mutate{
    gsub => [ "message", "\\n", "" ]
  }
  
  grok {
    match => [      
    
      # ----- Match EXAREME2 logs -----
      "message", "<%{NUMBER}>%{MONTH}%{SPACE}%{MONTHDAY}%{SPACE}%{TIME}%{SPACE}%{DATA}: %{TIMESTAMP_ISO8601:log_timestamp} - %{LOGLEVEL:loglevel} - %{DATA:method} - \[%{DATA:federation}\] - \[%{DATA:service}\] - \[%{DATA:node_id}\] - \[%{DATA:request_id}\] - %{GREEDYDATA:log_message}",
      
      # ----- Match PORTAL-BACKEND user generated logs -----
      "message", "<%{NUMBER}>%{MONTH}%{SPACE}%{MONTHDAY}%{SPACE}%{TIME}%{SPACE}%{DATA}: %{TIMESTAMP_ISO8601:log_timestamp} - %{LOGLEVEL:loglevel}%{SPACE}- %{DATA:logger} - \[%{DATA:federation}\] - \[%{DATA:service}\] - User -> %{DATA:user} , Endpoint -> \(%{WORD:http_method}\) %{URIPATH:http_path} , Info -> %{GREEDYDATA:log_message}",
      
      # ----- Match PORTAL-BACKEND system generated logs -----
      "message", "<%{NUMBER}>%{MONTH}%{SPACE}%{MONTHDAY}%{SPACE}%{TIME}%{SPACE}%{DATA}: %{TIMESTAMP_ISO8601:log_timestamp} - %{LOGLEVEL:loglevel}%{SPACE}- %{DATA:logger} - \[%{DATA:federation}\] - \[%{DATA:service}\] - %{GREEDYDATA:log_message}"
    ]
    
    add_tag => [ "parsed" ]
  }
  
  # Handle cases where parsing fails
  if "_grokparsefailure" in [tags] {
    mutate {
      add_tag => ["grok_fail"]
    }
  }  
  
  mutate {
    remove_field => ["[event][original]"]  # Remove raw log field
  }

  date {
    match => ["log_timestamp", "ISO8601"]
    target => "@timestamp"
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
  }

  stdout {
    codec => rubydebug
  }
}
