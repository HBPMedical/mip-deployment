version: '3.7'

services:
  exareme2_rabbitmq:
    image: madgik/exareme2_rabbitmq:${EXAREME2}
    ports:
      - "5672:5672"
    environment:
      - RABBITMQ_ADMIN_USER=user
      - RABBITMQ_ADMIN_PASSWORD=password
      - RABBITMQ_ADMIN_VHOST=user_vhost
      - RABBITMQ_SLEEP_BEFORE_CONFIGURATION=30
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  exareme2_monetdb:
    image: madgik/exareme2_db:${EXAREME2}
    ports:
      - "50000:50000"
    environment:
      - SOFT_RESTART_MEMORY_LIMIT=1000
      - HARD_RESTART_MEMORY_LIMIT=1000
    volumes:
      - ../data:/opt/data

  exareme2_mipdb:
    image: madgik/exareme2_mipdb:${EXAREME2}
    environment:
      - DB_IP=172.17.0.1
      - DB_PORT=50000
    volumes:
      - ../data:/opt/data

  exareme2_worker:
    image: madgik/exareme2_worker:${EXAREME2}
    environment:
      - WORKER_IDENTIFIER=localworker1
      - WORKER_ROLE=LOCALWORKER
      - LOG_LEVEL=DEBUG
      - FRAMEWORK_LOG_LEVEL=INFO
      - CELERY_TASKS_TIMEOUT=20
      - CELERY_RUN_UDF_TASK_TIMEOUT=120
      - RABBITMQ_IP=172.17.0.1
      - RABBITMQ_PORT=5672
      - MONETDB_IP=172.17.0.1
      - MONETDB_PORT=50000
      - SMPC_ENABLED=false
      - SMPC_OPTIONAL=false
    depends_on:
      - exareme2_monetdb
      - exareme2_rabbitmq
    restart: unless-stopped

  exareme2_controller:
    image: madgik/exareme2_controller:${EXAREME2}
    ports:
      - '5000:5000'
    environment:
      - LOG_LEVEL=DEBUG
      - FRAMEWORK_LOG_LEVEL=INFO
      - DEPLOYMENT_TYPE=LOCAL
      - WORKER_LANDSCAPE_AGGREGATOR_UPDATE_INTERVAL=10
      - CLEANUP_FOLDER=/tmp/exareme2
      - WORKERS_CLEANUP_INTERVAL=60
      - WORKERS_CLEANUP_CONTEXTID_RELEASE_TIMELIMIT=3600
      - LOCALWORKERS_CONFIG_FILE=/opt/config/localworkers_config.json
      - CELERY_TASKS_TIMEOUT=20
      - CELERY_RUN_UDF_TASK_TIMEOUT=120
      - SMPC_ENABLED=false
      - SMPC_OPTIONAL=false
    volumes:
      - ./config/:/opt/config/
    restart: unless-stopped

  portalbackend_db:
    image: postgres:11.20-alpine
    volumes:
      - ./.stored_data/portalbackenddb:/var/lib/postgresql/data
    hostname: portalbackend_db
    environment:
      POSTGRES_PASSWORD: test
    command: -p 5433
    ports:
      - '5433:5433'
    restart: unless-stopped

  create_dbs:
    image: hbpmip/create-databases:1.1.0
    depends_on:
      - portalbackend_db
    environment:
      DB_HOST: portalbackend_db
      DB_PORT: 5433
      DB_ADMIN_USER: postgres
      DB_ADMIN_PASSWORD: test
      DB4: portal
      USER4: portal
      PASSWORD4: portalpwd
    restart: on-failure

  portalbackend:
    image: hbpmip/portal-backend:${PORTALBACKEND}
    ports:
      - '8080:8080'
      - '8089:8089'
    environment:
      ### API ###
      LOG_LEVEL: INFO
      LOG_LEVEL_FRAMEWORK: INFO
      ALGORITHM_UPDATE_INTERVAL: 30     # seconds
      ### Database ###
      PORTAL_DB_URL: jdbc:postgresql://portalbackend_db:5433/portal
      PORTAL_DB_SERVER: portalbackend_db:5433
      PORTAL_DB_USER: portal
      PORTAL_DB_PASSWORD: portalpwd
      ### Exareme2 ###
      EXAREME2_URL: http://172.17.0.1:5000
      ### Keycloak ###
      AUTHENTICATION: 0
#      AUTHENTICATION: 1     # Should be enabled for keycloak
      KEYCLOAK_AUTH_URL: http://172.17.0.1/auth/
      KEYCLOAK_REALM: MIP
      KEYCLOAK_CLIENT_ID: MIP
      KEYCLOAK_CLIENT_SECRET: dae83a6b-c769-4186-8383-f0984c6edf05
      KEYCLOAK_SSL_REQUIRED: none
    depends_on:
      - create_dbs
    volumes:
      - ./config:/opt/portal/api
    restart: unless-stopped

  gateway-db:
    image: postgres
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: pass123
    volumes:
      - ./.stored_data/gatewaydb:/var/lib/postgres
    expose:
      - 5432

  gateway:
    image: hbpmip/gateway:${GATEWAY}
    environment:
      - DB_HOST=gateway-db
      - ENGINE_TYPE=exareme
      - ENGINE_BASE_URL=http://172.17.0.1:8080/services/
      - AUTH_SKIP=true
      - AUTH_ENABLE_SSO=false
      #      - AUTH_ENABLE_SSO=true         # Should be enabled for Keycloak
      - BASE_URL_CONTEXT=services
      - GATEWAY_PORT=8081
      - CACHE_ENABLED=false
      - NODE_ENV=development
    links:
      - gateway-db
    depends_on:
      - gateway-db
    expose:
      - '8081'
    restart: unless-stopped

  frontend:
    image: hbpmip/portal-frontend:${FRONTEND}
    depends_on:
      - gateway
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ../config/caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./.stored_data/caddy/caddy_data:/data
    environment:
      INSTANCE_NAME: 'MIP ${MIP}'
      VERSION: 'Frontend: ${FRONTEND}, Gateway: ${GATEWAY}, Backend: ${PORTALBACKEND}, Exareme: ${EXAREME2}'
      ERROR_LOG_LEVEL: info
      PORTAL_BACKEND_SERVER: 172.17.0.1:8080
      PORTAL_BACKEND_CONTEXT: services
      GATEWAY_SERVER: gateway:8081
      PUBLIC_MIP_HOST: 172.17.0.1
      PUBLIC_MIP_PROTOCOL: http
      EXTERNAL_MIP_PROTOCOL: http
      KEYCLOAK_HOST: http://keycloak:8095
      KEYCLOAK_AUTH_PATH: /auth
      PORTALBACKEND_AUTH_URL: /oauth2/authorization/keycloak
      MIP_LINK: direct
    restart: unless-stopped

#  keycloak_db:
#    image: postgres:12.2
#    volumes:
#      - ./.stored_data/keycloak:/var/lib/postgresql/data
#    environment:
#      POSTGRES_DB: keycloak
#      POSTGRES_USER: keycloak
#      POSTGRES_PASSWORD: password
#    restart: unless-stopped
#
#  keycloak:
#    image: jboss/keycloak:15.0.2
#    command: -Djboss.http.port=8095
#    volumes:
#      - ../config/keycloak/keycloak.json:/tmp/mip.json
#      - ../config/keycloak/HBPTheme:/opt/jboss/keycloak/themes/HBPTheme
#    environment:
#      DB_VENDOR: POSTGRES
#      DB_ADDR: keycloak_db
#      DB_PORT: 5432
#      DB_DATABASE: keycloak
#      DB_USER: keycloak
#      DB_SCHEMA: public
#      DB_PASSWORD: password
#      KEYCLOAK_USER: admin
#      KEYCLOAK_PASSWORD: Pa55w0rd
#      KEYCLOAK_IMPORT: /tmp/mip.json
#      KEYCLOAK_HOSTNAME: 172.17.0.1
#      PROXY_ADDRESS_FORWARDING: 'true'  #important for reverse proxy
#    ports:
#      - '8095:8095'
#      - '8443:8443'
#    depends_on:
#      - keycloak_db
#    restart: unless-stopped